
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  username: 'username',
  name: 'name',
  profileImg: 'profileImg',
  emailVerified: 'emailVerified',
  age: 'age',
  gender: 'gender',
  profileCompleted: 'profileCompleted',
  createdAt: 'createdAt',
  lastLogin: 'lastLogin',
  timezone: 'timezone',
  deviceType: 'deviceType',
  role: 'role',
  avatarChoice: 'avatarChoice',
  communityTermsAccepted: 'communityTermsAccepted'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.TwoFactorAuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  secret: 'secret',
  verified: 'verified',
  enabled: 'enabled'
};

exports.Prisma.OTPVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expires: 'expires',
  verified: 'verified',
  createdAt: 'createdAt',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress'
};

exports.Prisma.AircraftScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug'
};

exports.Prisma.TestTypeScalarFieldEnum = {
  id: 'id',
  type: 'type',
  slug: 'slug'
};

exports.Prisma.TitleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  aircraftId: 'aircraftId',
  testTypeId: 'testTypeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  titleId: 'titleId',
  aircraftId: 'aircraftId',
  totalQuestions: 'totalQuestions',
  timeLimit: 'timeLimit',
  updatedBy: 'updatedBy',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  questionNumber: 'questionNumber',
  questionText: 'questionText',
  correctAnswer: 'correctAnswer',
  explanation: 'explanation'
};

exports.Prisma.OptionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  optionText: 'optionText',
  isCorrect: 'isCorrect',
  label: 'label'
};

exports.Prisma.TestAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  testId: 'testId',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  testSnapshot: 'testSnapshot',
  score: 'score',
  timeTaken: 'timeTaken',
  passFail: 'passFail',
  status: 'status',
  attemptNumber: 'attemptNumber',
  deviceType: 'deviceType',
  browserInfo: 'browserInfo',
  ipLocation: 'ipLocation'
};

exports.Prisma.QuestionResponseScalarFieldEnum = {
  id: 'id',
  testAttemptId: 'testAttemptId',
  questionId: 'questionId',
  userAnswer: 'userAnswer',
  isCorrect: 'isCorrect',
  timeTaken: 'timeTaken',
  answeredAt: 'answeredAt',
  sequenceNumber: 'sequenceNumber'
};

exports.Prisma.AdminUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  lastLogin: 'lastLogin'
};

exports.Prisma.AdminActivityLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.TestChangeLogScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  changedBy: 'changedBy',
  changeDate: 'changeDate',
  changeType: 'changeType',
  previousContent: 'previousContent'
};

exports.Prisma.CommunityThreadScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  userId: 'userId',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  replyCount: 'replyCount'
};

exports.Prisma.CommunityMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  threadId: 'threadId',
  parentId: 'parentId',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  upvoteCount: 'upvoteCount'
};

exports.Prisma.MessageUpvoteScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.MessageReportScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  reporterId: 'reporterId',
  reason: 'reason',
  details: 'details',
  status: 'status',
  resolution: 'resolution',
  createdAt: 'createdAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  moduleType: 'moduleType',
  moduleId: 'moduleId',
  priceMonthly: 'priceMonthly',
  priceYearly: 'priceYearly',
  isActive: 'isActive',
  features: 'features',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  paymentReference: 'paymentReference',
  lastBillingDate: 'lastBillingDate',
  nextBillingDate: 'nextBillingDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  username: 'username',
  name: 'name',
  profileImg: 'profileImg',
  gender: 'gender',
  timezone: 'timezone',
  deviceType: 'deviceType',
  role: 'role',
  avatarChoice: 'avatarChoice'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken'
};

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  token: 'token'
};

exports.Prisma.TwoFactorAuthOrderByRelevanceFieldEnum = {
  id: 'id',
  secret: 'secret'
};

exports.Prisma.OTPVerificationOrderByRelevanceFieldEnum = {
  id: 'id',
  token: 'token',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress'
};

exports.Prisma.AircraftOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug'
};

exports.Prisma.TestTypeOrderByRelevanceFieldEnum = {
  type: 'type',
  slug: 'slug'
};

exports.Prisma.TitleOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug'
};

exports.Prisma.TestOrderByRelevanceFieldEnum = {
  title: 'title'
};

exports.Prisma.QuestionOrderByRelevanceFieldEnum = {
  questionText: 'questionText',
  correctAnswer: 'correctAnswer',
  explanation: 'explanation'
};

exports.Prisma.OptionOrderByRelevanceFieldEnum = {
  optionText: 'optionText',
  label: 'label'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.TestAttemptOrderByRelevanceFieldEnum = {
  status: 'status',
  deviceType: 'deviceType',
  browserInfo: 'browserInfo',
  ipLocation: 'ipLocation'
};

exports.Prisma.QuestionResponseOrderByRelevanceFieldEnum = {
  userAnswer: 'userAnswer'
};

exports.Prisma.AdminUserOrderByRelevanceFieldEnum = {
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role'
};

exports.Prisma.AdminActivityLogOrderByRelevanceFieldEnum = {
  action: 'action',
  entityType: 'entityType'
};

exports.Prisma.TestChangeLogOrderByRelevanceFieldEnum = {
  changeType: 'changeType'
};

exports.Prisma.CommunityThreadOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content'
};

exports.Prisma.CommunityMessageOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.MessageReportOrderByRelevanceFieldEnum = {
  reason: 'reason',
  details: 'details',
  status: 'status',
  resolution: 'resolution'
};

exports.Prisma.SubscriptionPlanOrderByRelevanceFieldEnum = {
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  moduleType: 'moduleType'
};

exports.Prisma.UserSubscriptionOrderByRelevanceFieldEnum = {
  status: 'status',
  paymentReference: 'paymentReference'
};


exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  TwoFactorAuth: 'TwoFactorAuth',
  OTPVerification: 'OTPVerification',
  Aircraft: 'Aircraft',
  TestType: 'TestType',
  Title: 'Title',
  Test: 'Test',
  Question: 'Question',
  Option: 'Option',
  TestAttempt: 'TestAttempt',
  QuestionResponse: 'QuestionResponse',
  AdminUser: 'AdminUser',
  AdminActivityLog: 'AdminActivityLog',
  TestChangeLog: 'TestChangeLog',
  CommunityThread: 'CommunityThread',
  CommunityMessage: 'CommunityMessage',
  MessageUpvote: 'MessageUpvote',
  MessageReport: 'MessageReport',
  SubscriptionPlan: 'SubscriptionPlan',
  UserSubscription: 'UserSubscription'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
