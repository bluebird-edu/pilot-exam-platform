// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String?             // Optional if using OAuth
  username          String?             // Username can be derived from full name
  name              String              // Full name
  profileImg        String?             // Profile image URL
  createdAt         DateTime            @default(now())
  lastLogin         DateTime?
  timezone          String?             @default("UTC")
  deviceType        String?             // mobile, tablet, desktop
  testAttempts      TestAttempt[]
}

model Aircraft {
  id            Int             @id @default(autoincrement())
  name          String          // Boeing-737-max, Airbus-A320, etc.
  type          String          // Boeing, Airbus, etc
  tests         Test[]
  titles        Title[]         // New relation to Title model
}

model TestType {
  id        Int     @id @default(autoincrement())
  type      String  // mock or practice
  titles    Title[]
}

model Title {
  id          Int       @id @default(autoincrement())
  name        String
  aircraftId  Int
  aircraft    Aircraft  @relation(fields: [aircraftId], references: [id])
  testTypeId  Int
  testType    TestType  @relation(fields: [testTypeId], references: [id])
  tests       Test[]    // One title can have multiple tests (versions)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Test {
  id             Int           @id @default(autoincrement())
  title          String
  titleId        Int?          // Optional link to Title model
  titleRef       Title?        @relation(fields: [titleId], references: [id])
  aircraftId     Int
  aircraft       Aircraft      @relation(fields: [aircraftId], references: [id])
  questions      Question[]
  totalQuestions Int
  timeLimit      Int?          // in minutes, nullable for practice tests
  lastUpdated    DateTime      @default(now())
  updatedBy      Int           // admin user ID
  isActive       Boolean       @default(true) // Only one active test per title
  createdAt      DateTime      @default(now())
  testAttempts   TestAttempt[]
}

model Question {
  id              Int               @id @default(autoincrement())
  testId          Int
  test            Test              @relation(fields: [testId], references: [id])
  questionNumber  Int               // Position/order in the test
  questionText    String            @db.Text
  correctAnswer   String            // A, B, C, D
  explanation     String?           @db.Text
  options         Option[]
  responses       QuestionResponse[]
}

model Option {
  id           Int      @id @default(autoincrement())
  questionId   Int
  question     Question @relation(fields: [questionId], references: [id])
  optionText   String   @db.Text
  isCorrect    Boolean
  label        String   // A, B, C, D
}

model TestAttempt {
  id                Int                 @id @default(autoincrement())
  userId            Int
  user              User                @relation(fields: [userId], references: [id])
  testId            Int
  test              Test                @relation(fields: [testId], references: [id])
  startedAt         DateTime            @default(now())
  completedAt       DateTime?
  testSnapshot      Json                // Snapshot of test at time of attempt
  score             Float?              // Percentage score
  timeTaken         Int?                // in seconds
  passFail          Boolean?
  status            String              @default("in_progress") // in_progress, completed, abandoned
  questionResponses QuestionResponse[]
  // Analytics fields
  attemptNumber     Int                 // 1st attempt, 2nd attempt, etc.
  deviceType        String?             // mobile, tablet, desktop
  browserInfo       String?
  ipLocation        String?             // City/Country
}

model QuestionResponse {
  id            Int         @id @default(autoincrement())
  testAttemptId Int
  testAttempt   TestAttempt @relation(fields: [testAttemptId], references: [id])
  questionId    Int
  question      Question    @relation(fields: [questionId], references: [id])
  userAnswer    String?     // User selected option (A, B, C, D)
  isCorrect     Boolean?
  timeTaken     Int?        // in seconds
  answeredAt    DateTime    @default(now())
  sequenceNumber Int        // Position in the test
}

model AdminUser {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  password          String
  role              String              @default("admin") // admin, super_admin
  createdAt         DateTime            @default(now())
  lastLogin         DateTime?
  activityLogs      AdminActivityLog[]
  testChanges       TestChangeLog[]
}

model AdminActivityLog {
  id         Int       @id @default(autoincrement())
  adminId    Int
  admin      AdminUser @relation(fields: [adminId], references: [id])
  action     String    // e.g., "update_test", "delete_test"
  entityType String    // e.g., "test", "user", "subscription"
  entityId   Int
  details    Json?
  timestamp  DateTime  @default(now())
}

model TestChangeLog {
  id              Int       @id @default(autoincrement())
  testId          Int
  changedBy       Int       // admin ID
  admin           AdminUser @relation(fields: [changedBy], references: [id])
  changeDate      DateTime  @default(now())
  changeType      String    // "created", "updated", "deleted"
  previousContent Json?     // Optional backup of previous content
}